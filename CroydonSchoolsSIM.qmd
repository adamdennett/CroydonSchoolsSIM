---
title: "CroydonSchoolsSIM"
author: "Adam Dennett"
format: html
editor: visual
---

## Vignette to demonstrate Modelling pupil flows into schools in Croydon from surrounding LSOAs.

```{r}
# Install pak if not already installed:
if (!requireNamespace("pak", quietly = TRUE)) {
  install.packages("pak")
}
pak::pkg_install("Urban-Analytics-Technology-Platform/od2net/r")
```

```{r}
library(tidyverse)
library(sf)
library(janitor)
library(here)
library(usethis)
library(tmap)
library(readxl)
```

```{r}
here()
use_git()
use_github() 
```

## Introduction

### Data Set-up - Destinations (Schools in Croydon)

The data used in this vignette is the Edubase dataset, which contains information on all schools in England. The data is filtered to only include schools in London, and then further filtered to only include schools in Croydon. The data is then converted into a simplefeatures object, which is a spatial object that can be used in spatial analysis.

These schools represent the destinations in our spatial interaction model.

```{r}
#Reading in all schools basefile, and filtering out for the ones that are open, and in London - then attaching geometries
LondonSchools <- read_csv("https://www.dropbox.com/s/pk56hu33liaog46/edubasealldata.csv?raw=1") %>% 
  dplyr::filter(str_detect(`EstablishmentStatus (name)`, "Open")) %>%  
  dplyr::filter(str_detect(`DistrictAdministrative (code)`, "^E09")) %>% 
  clean_names() %>% 
  st_as_sf(., coords = c("easting", "northing")) %>% 
  st_set_crs(27700)
  

CroydonSchools <- LondonSchools  %>%  
  dplyr::filter(str_detect(la_name, "Croydon")) %>%
  st_as_sf(., coords = c("easting", "northing")) %>% 
  st_set_crs(27700)

CroydonSchools_secondary <- CroydonSchools %>%
  filter(!phase_of_education_name %in% c("Primary", "Nursery", "Not applicable"))
```

### Data Set-up - Origins (LSOAs in Croydon and the Surrounding Boroughs)

```{r}
#use_zip("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip", destdir = getwd())
#unzip("statistical-gis-boundaries-london.zip", exdir = getwd())

London_LSOAs <- st_read("data/statistical-gis-boundaries-london/ESRI/LSOA_2011_London_gen_MHW.shp")%>% st_transform(27700) %>% clean_names

London_LSOAs <- sf::st_make_valid(London_LSOAs)

London_Boroughs <- st_read("data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp") %>% st_transform(27700) %>% clean_names

London_Boroughs <- sf::st_make_valid(London_Boroughs)

Croydon_LSOAs <- London_LSOAs |> 
  dplyr::filter(str_detect(lad11nm, "Croydon"))

Croydon_Borough <- London_Boroughs |> 
  dplyr::filter(str_detect(name, "Croydon"))

surround_boroughs <- c("Sutton", "Merton", "Wandsworth", "Lambeth", "Southwark", "Lewisham", "Bromley", "Croydon")

Surrounding_Boroughs <- London_Boroughs |> 
  dplyr::filter(name %in% surround_boroughs)

Croydon_Surround_LSOAs <- London_LSOAs %>% filter(lad11nm %in% surround_boroughs)

```


## Additional Data

```{r}
#read an excel file from the web - curl is the key here. 
download.file("https://londondatastore-upload.s3.amazonaws.com/lsoa-data.xls", destfile = "data/LSOA_Atlas.xls", method = "curl")

#have a look inside the horrible file and read in just the bits you want
atlas_headers <- as.list(read_xls("data/LSOA_Atlas.xls", sheet = 2, range = "A2:BG2") %>% clean_names())
names(atlas_headers)

LSOA_Atlas <- read_xls("data/LSOA_Atlas.xls", sheet = 2, range = "A4:BG4838", col_names = c(
  "lsoa_code",                                                                     
  "lsoa_name",                                                                       
  "no_adults_in_employment_in_household_with_dependent_children",              
  "percent_of_households_with_no_adults_in_employment_with_dependent_children",
  "all_lone_parent_housholds_with_dependent_children",                         
  "lone_parents_not_in_employment",                                            
  "lone_parent_not_in_employment_percent",                                     
  "economically_active_total",                                                 
  "economically_inactive_total" ,                                              
  "economically_active_employee",                                             
  "economically_active_self_employed",                                         
  "economically_active_unemployed",                                            
  "economically_active_full_time_student",                                     
  "employment_rate",                                                           
  "unemployment_rate",                                                         
  "no_qualifications",                                                         
  "highest_level_of_qualification_level_1_qualifications",
  "highest_level_of_qualification_level_2_qualifications",                     
  "highest_level_of_qualification_apprenticeship",                             
  "highest_level_of_qualification_level_3_qualifications",                     
  "highest_level_of_qualification_level_4_qualifications_and_above",           
  "highest_level_of_qualification_other_qualifications",                       
  "schoolchildren_and_full_time_students_age_18_and_over",                     
  "percent_no_qualifications",                                                 
  "percent_highest_level_of_qualification_level_1_qualifications",             
  "percent_highest_level_of_qualification_level_2_qualifications",            
  "percent_highest_level_of_qualification_apprenticeship",                     
  "percent_highest_level_of_qualification_level_3_qualifications",             
  "percent_highest_level_of_qualification_level_4_qualifications_and_above",   
  "percent_highest_level_of_qualification_other_qualifications",               
  "percent_schoolchildren_and_full_time_students_age_18_and_over",             
  "day_to_day_activities_limited_a_lot",                                       
  "day_to_day_activities_limited_a_little",                                    
  "day_to_day_activities_not_limited",                                         
  "very_good_or_good_health",                                                  
  "fair_health",                                                               
  "bad_or_very_bad_health",                                                    
  "day_to_day_activities_limited_a_lot_percent",                               
  "day_to_day_activities_limited_a_little_percent",                            
  "day_to_day_activities_not_limited_percent",                                 
  "very_good_or_good_health_percent",                                          
  "fair_health_percent",                                                       
  "bad_or_very_bad_health_percent",                                            
  "no_cars_or_vans_in_household",                                              
  "x1_car_or_van_in_household",                                                
  "x2_cars_or_vans_in_household",                                              
  "x3_cars_or_vans_in_household",                                              
  "x4_or_more_cars_or_vans_in_household",                                      
  "sum_of_all_cars_or_vans_in_the_area",                                       
  "no_cars_or_vans_in_household_percent",                                      
  "x1_car_or_van_in_household_percent",                                        
  "x2_cars_or_vans_in_household_percent",                                      
  "x3_cars_or_vans_in_household_percent",                                      
  "x4_or_more_cars_or_vans_in_household_percent",                              
  "cars_per_household",                                                        
  "total_number_of_children",                                                  
  "total_number_of_families_claiming_benefit",                                 
  "number_of_families_with_3_children",                                        
  "percent_of_families_with_3_children"
), col_types = c(
  "text",
  "text",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric",
  "numeric"
), na = "-")

#write_csv(LSOA_Atlas, "data/LSOA_Atlas.csv")

```


## Map of the spatial system

```{r}
tmap_mode("view")
tmap_options(check.and.fix = TRUE)

map <- tm_shape(CroydonSchools_secondary) +
          tm_dots(col="phase_of_education_name", size=0.05,id="establishment_name", title = "Phase of Education", border.alpha = 0) +
  tm_shape(Surrounding_Boroughs) +
          tm_polygons(col = NA, alpha = 0) +
  tm_shape(Croydon_Surround_LSOAs) +
          tm_polygons(border.col = "grey", border.alpha = 0.5, alpha = 0) 

map
```

## Observed Flow Data and observed Oi and Dj pupil counts

Note that these are only the observed LSOA to School counts in this year - there are other LSOAs that pupils could come from, we will deal with those later.

```{r}
#need to predownload some school flow data in .xlsx format from here:
#https://data.london.gov.uk/dataset/london-schools-atlas

##read in 2016 school flow data for London - different files for LSOA to School and School to LSOA
Catchments_LSOAtoSecSchool_2016 <- read_excel("data/Catchments_LSOAtoSecSchool_2016_LDS.xlsx", sheet = "LSOAtoSecSchool_LDS_2016") %>% clean_names()
Catchments_SecSchooltoLSOA_2016 <- read_excel("data/Catchments_SecSchootoLSOA_2016_LDS.xlsx", sheet = "SecSchootoLSOA_LDS_2016") %>% clean_names()

#filtering out for Croydon schools only
# note, flows are equivalent, but Oi and Dj values are different

Croydon_LSOAtoSecSchool_2016 <- Catchments_LSOAtoSecSchool_2016 %>% 
  dplyr::filter(secondary_school_urn %in% CroydonSchools_secondary$urn)%>% 
  unite("od_code", c("lsoa_code","secondary_school_urn"), sep = "_", remove = FALSE) %>%
  relocate(od_code)

Croydon_SecSchooltoLSOA_2016 <- Catchments_SecSchooltoLSOA_2016 %>% 
  dplyr::filter(secondary_school_urn %in% CroydonSchools_secondary$urn)%>% 
  unite("od_code", c("lsoa_code","secondary_school_urn"), sep = "_", remove = FALSE) %>%
  relocate(od_code)

## merge so we have Oi and Dj values for each LSOA and School

temp <- Croydon_SecSchooltoLSOA_2016[,c("od_code", "total_sec_school_pupils")]

# Left join the two data frames based on the 'od_code' column
croydon_lSOA_to_school_obs <- left_join(Croydon_LSOAtoSecSchool_2016, temp, by = "od_code") 


```

## Full matrix of possible flows with additional orig and dest data

```{r}

library(stplanr)

##big matrix for the whole of London
lsoa_london_to_croydon_school_matrix <- 
  matrix(0, nrow = nrow(London_LSOAs), ncol = nrow(CroydonSchools_secondary), dimnames = list(London_LSOAs$lsoa11cd,CroydonSchools_secondary$urn))

#smaller matrix for boroughs surrounding Croydon
lsoa_surround_croydon_to_croydon_school_matrix <- 
  matrix(0, nrow = nrow(Croydon_Surround_LSOAs), ncol = nrow(CroydonSchools_secondary), dimnames = list(Croydon_Surround_LSOAs$lsoa11cd,CroydonSchools_secondary$urn))

###############
#matrix to paired list
#all of London - and add an od_id
lsoa_london_to_croydon_school_all <- odmatrix_to_od(lsoa_london_to_croydon_school_matrix) %>% 
  unite("od_code", c("orig","dest"), sep = "_", remove = FALSE)

#join the flows
lsoa_london_to_croydon_school_all$flow <- croydon_lSOA_to_school_obs$pupil_count[match(lsoa_london_to_croydon_school_all$od_code, croydon_lSOA_to_school_obs$od_code)]

# now add some origin and destination population variables
#origins first
lsoa_london_to_croydon_school_all$orig_pupils <- croydon_lSOA_to_school_obs$total_no_of_lsoa_pupils[match(lsoa_london_to_croydon_school_all$orig, croydon_lSOA_to_school_obs$lsoa_code)]

lsoa_london_to_croydon_school_all$orig_pop <- London_LSOAs$usualres[match(lsoa_london_to_croydon_school_all$orig, London_LSOAs$lsoa11cd)]

#destinations next
lsoa_london_to_croydon_school_all$establishment_name <- CroydonSchools$establishment_name[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$dest_total_pupils <- croydon_lSOA_to_school_obs$total_sec_school_pupils[match(lsoa_london_to_croydon_school_all$dest, croydon_lSOA_to_school_obs$secondary_school_urn)]

lsoa_london_to_croydon_school_all$dest_number_pupils <- CroydonSchools$number_of_pupils[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$dest_capacity <- CroydonSchools$school_capacity[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$dest_pct_fsm <- CroydonSchools$percentage_fsm[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$type_of_establishment_name <- CroydonSchools$type_of_establishment_name[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$establishment_type_group_name <- CroydonSchools$establishment_type_group_name[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$gender_name <- CroydonSchools$gender_name[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$phase_of_education_name <- CroydonSchools$phase_of_education_name[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_london_to_croydon_school_all$ofsted_rating_name <- CroydonSchools$ofsted_rating_name[match(lsoa_london_to_croydon_school_all$dest, CroydonSchools$urn)]

########################################################################################
#matrix to paired list
#local surrounding boroughs
lsoa_surround_croydon_to_croydon_school_all <- odmatrix_to_od(lsoa_surround_croydon_to_croydon_school_matrix) %>% 
  unite("od_code", c("orig","dest"), sep = "_", remove = FALSE)

#join the flows
lsoa_surround_croydon_to_croydon_school_all$flow <- croydon_lSOA_to_school_obs$pupil_count[match(lsoa_surround_croydon_to_croydon_school_all$od_code, croydon_lSOA_to_school_obs$od_code)]

# now add some origin and destination population variables
#origins first
lsoa_surround_croydon_to_croydon_school_all$orig_pupils <- croydon_lSOA_to_school_obs$total_no_of_lsoa_pupils[match(lsoa_surround_croydon_to_croydon_school_all$orig, croydon_lSOA_to_school_obs$lsoa_code)]

lsoa_surround_croydon_to_croydon_school_all$orig_pop <- London_LSOAs$usualres[match(lsoa_surround_croydon_to_croydon_school_all$orig, London_LSOAs$lsoa11cd)]

#destinations next
lsoa_surround_croydon_to_croydon_school_all$establishment_name <- CroydonSchools$establishment_name[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$dest_total_pupils <- croydon_lSOA_to_school_obs$total_sec_school_pupils[match(lsoa_surround_croydon_to_croydon_school_all$dest, croydon_lSOA_to_school_obs$secondary_school_urn)]

lsoa_surround_croydon_to_croydon_school_all$dest_number_pupils <- CroydonSchools$number_of_pupils[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$dest_capacity <- CroydonSchools$school_capacity[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$dest_pct_fsm <- CroydonSchools$percentage_fsm[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$type_of_establishment_name <- CroydonSchools$type_of_establishment_name[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$establishment_type_group_name <- CroydonSchools$establishment_type_group_name[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$gender_name <- CroydonSchools$gender_name[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$phase_of_education_name <- CroydonSchools$phase_of_education_name[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

lsoa_surround_croydon_to_croydon_school_all$ofsted_rating_name <- CroydonSchools$ofsted_rating_name[match(lsoa_surround_croydon_to_croydon_school_all$dest, CroydonSchools$urn)]

########################################################################################
####################################
# Just the observed flows

croydon_lSOA_to_school_obs <- croydon_lSOA_to_school_obs %>%
  rename(flow = pupil_count, 
orig = lsoa_code, 
dest = secondary_school_urn)

# now add some origin and destination population variables
#origins first
croydon_lSOA_to_school_obs$orig_pop <- London_LSOAs$usualres[match(croydon_lSOA_to_school_obs$orig, London_LSOAs$lsoa11cd)]

#destinations next
croydon_lSOA_to_school_obs$establishment_name <- CroydonSchools$establishment_name[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$dest_total_pupils <- croydon_lSOA_to_school_obs$total_sec_school_pupils[match(croydon_lSOA_to_school_obs$dest, croydon_lSOA_to_school_obs$secondary_school_urn)]

croydon_lSOA_to_school_obs$dest_number_pupils <- CroydonSchools$number_of_pupils[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$dest_capacity <- CroydonSchools$school_capacity[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$dest_pct_fsm <- CroydonSchools$percentage_fsm[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$type_of_establishment_name <- CroydonSchools$type_of_establishment_name[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$establishment_type_group_name <- CroydonSchools$establishment_type_group_name[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$gender_name <- CroydonSchools$gender_name[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$phase_of_education_name <- CroydonSchools$phase_of_education_name[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

croydon_lSOA_to_school_obs$ofsted_rating_name <- CroydonSchools$ofsted_rating_name[match(croydon_lSOA_to_school_obs$dest, CroydonSchools$urn)]

```

## Geometry Set-up

```{r}
#LSOA Origins first:
Points_London_LSOAs <- st_centroid(London_LSOAs)
Points_Croydon_Surround_LSOAs <- st_centroid(Croydon_Surround_LSOAs)

#School Destinations next:
Points_CroydonSchools_secondary <- st_centroid(CroydonSchools_secondary)

#simplify flow dataframe
simple_croydon <- lsoa_surround_croydon_to_croydon_school_all[,c("orig","dest","flow")]
simple_lon_to_croy <- lsoa_london_to_croydon_school_all[,c("orig","dest","flow")]

#Get the travel lines
london_travel_lines <- od2line(flow = simple_lon_to_croy, zones = Points_London_LSOAs, destinations = Points_CroydonSchools_secondary) %>% 
  unite("od_code", c("orig","dest"), sep = "_", remove = FALSE)

croydon_travel_lines <- od2line(flow = simple_croydon, zones = Points_Croydon_Surround_LSOAs, destinations = Points_CroydonSchools_secondary) %>% 
  unite("od_code", c("orig","dest"), sep = "_", remove = FALSE)


write_csv(simple_croydon, "simple_croydon_flow.csv")
st_write(Points_Croydon_Surround_LSOAs, "Points_LSOA_Croydon.geojson", append=F)
st_write(Points_CroydonSchools_secondary, "Points_CroydonSchools.geojson", append=F)


```

Map the flows

```{r}

tmap_mode("view")
map <- tm_shape(croydon_travel_lines) +
  tm_lines(palette = "plasma", breaks = c(0, 5, 10, 20, 40, 100,200),
           lwd = "flow",
           scale = 9,
           id="lsoa_code.y",
           popup.vars= c("orig", "dest","flow"),
           title.lwd = "number_of_pupils",
           alpha = 0.6,
           col = "flow",
           title = "Pupil Count")+
  tm_shape(CroydonSchools_secondary)+
          tm_dots(col="phase_of_education_name", size=0.01,id="establishment_name", title = "Phase of Education") +
  tm_shape(London_Boroughs) +
          tm_polygons(col = NA, alpha = 0)

map
```

```{r}
### Create a little test system
library(od2net)

lsoa_london_to_croydon_school_all$dest_total_pupils <- croydon_lSOA_to_school_obs$total_sec_school_pupils[match(lsoa_london_to_croydon_school_all$dest, croydon_lSOA_to_school_obs$secondary_school_urn)]

dest_fake <- st_read("data/fake_schools.geojson")

dest_fake$school_capacity <- CroydonSchools_secondary$school_capacity[match(dest_fake$urn, CroydonSchools_secondary$urn)]
dest_fake$number_of_pupils <- CroydonSchools_secondary$number_of_pupils[match(dest_fake$urn, CroydonSchools_secondary$urn)]
dest_fake$percentage_fsm <- CroydonSchools_secondary$percentage_fsm[match(dest_fake$urn, CroydonSchools_secondary$urn)]
dest_fake$ofsted_rating_name <- CroydonSchools_secondary$ofsted_rating_name[match(dest_fake$urn, CroydonSchools_secondary$urn)]
dest_fake$phase_of_education_name <- CroydonSchools_secondary$phase_of_education_name[match(dest_fake$urn, CroydonSchools_secondary$urn)]
dest_fake$establishment_name <- CroydonSchools_secondary$establishment_name[match(dest_fake$urn, CroydonSchools_secondary$urn)]

orig_small <- Croydon_LSOAs[1:10,c(1,9,15)]
orig_small$total_number_of_children <- LSOA_Atlas$total_number_of_children[match(orig_small$lsoa11cd, LSOA_Atlas$lsoa_code)]
orig_small$percent_no_qualifications <- LSOA_Atlas$percent_no_qualifications[match(orig_small$lsoa11cd, LSOA_Atlas$lsoa_code)]

write_csv(orig_small, "data/orig_small.csv")
write_csv(dest_fake, "data/dest_fake.csv")

#write_csv(Croydon_LSOAs[1:10,1],"data/mini_system.csv")
orig_small_centroids <- st_centroid(Croydon_LSOAs[1:10,]) %>%
  dplyr::mutate(x = st_coordinates(.)[,1], y = st_coordinates(.)[,2])

#fake_lines <- od2line(flow = simple_croydon, zones = Points_Croydon_Surround_LSOAs, destinations = Points_CroydonSchools_secondary) %>% 
#  unite("od_code", c("orig","dest"), sep = "_", remove = #FALSE)

tm_shape(orig_small) +
  tm_polygons(col = "grey", alpha = 0.5, border.col = "black", border.alpha = 0.5) +
tm_shape(orig_small_centroids) +
    tm_dots() + 
tm_shape(dest_fake) +
    tm_dots(col = "red", size = 0.1)

qtm(Croydon_LSOAs[1:10,])

st_write(Croydon_LSOAs[1:10,], "Croydon_LSOAs.shp", append=F)

write_csv(orig_small_centroids, "orig_small_centroids.csv")

dest_fake_centroids <- st_centroid(dest_fake) %>%
  dplyr::mutate(x = st_coordinates(.)[,1], y = st_coordinates(.)[,2])
write_csv(dest_fake, "data/fake_schools_centroids.csv")


#write_csv(Croydon_LSOAs)
```

## Distance to Schools (Straight Line)

```{r}
library(ggplot2)

#Straight line distances
croy_distances <- geo_length(croydon_travel_lines)
lond_distances <- geo_length(london_travel_lines)
# Convert to km
croydon_travel_lines$distances <- croy_distances/1000
london_travel_lines$distances <- lond_distances/1000

#add column for average distance traveled, grouped by LSOA
croydon_travel_lines$total_distance <- ((croydon_travel_lines$flow)*(croydon_travel_lines$distances))

#add rounded distance column
croydon_travel_lines$distance_100m <- round(croydon_travel_lines$distances, digits = 1)

custom_round <- function(x) {
  0.5 * round(2 * x)
}

croydon_travel_lines$distance_500m <- custom_round(croydon_travel_lines$distances)

#Make new df grouped by LSOA
Flows_by_100mdist <- st_set_geometry(croydon_travel_lines,NULL) %>% 
  dplyr::select(., c(flow,distance_100m)) %>% 
  group_by(distance_100m) %>% 
  summarise(flow = sum(flow, na.rm = TRUE))

Flows_over_100m <- Flows_by_100mdist %>% filter(distance_100m > 1)


#Make new df grouped by LSOA
Flows_by_500mdist <- st_set_geometry(croydon_travel_lines,NULL) %>% 
  dplyr::select(., c(flow,distance_500m)) %>% 
  group_by(distance_500m) %>% 
  summarise(flow = sum(flow, na.rm = TRUE))

Flows_over_500m <- Flows_by_500mdist %>% filter(distance_500m > 0.5)

ggplot(Flows_by_100mdist, aes(distance_100m, flow)) + geom_line() + scale_x_continuous(breaks = seq(0, 50, by = 1)) + labs(title = "Pupil Flows by Distance to School", x = "Distance (100's m)", y = "Pupil Count")

ggplot(Flows_by_500mdist, aes(distance_500m, flow)) + geom_line() + scale_x_continuous(breaks = seq(0, 50, by = 1)) + labs(title = "Pupil Flows by Distance to School", x = "Distance (100's m)", y = "Pupil Count") + 
  geom_smooth(method="lm", formula= (y ~ exp(-0.5 * x)), se=FALSE, color="red")

#ggplot(Flows_over_100m, aes(distance_100m, flow)) + geom_line() + scale_x_continuous(breaks = seq(0, 50, by = 1)) + labs(title = "Pupil Flows by Distance to School", x = "Distance (100's m)", y = "Pupil Count") + stat_function(fun=function(x) exp(-0.5 * x), geom="line", aes(colour=""))

#ggplot(Flows_over_100m, aes(log(distance_100m), flow)) + geom_line() + scale_x_continuous(breaks = seq(0, 50, by = 1)) + labs(title = "Pupil Flows by Distance to School", x = "Distance (100's m)", y = "Pupil Count") + stat_function(fun=function(x) exp(-0.5 * x), geom="line", aes(colour=""))

ggplot(Flows_over_500m, aes(distance_500m, flow)) + 
  geom_line() + scale_x_continuous(breaks = seq(0, 50, by = 1)) + 
  labs(title = "Pupil Flows by Distance to School", x = "Distance (100's m)", y = "Pupil Count") + 
  geom_smooth(method="lm", formula= (y ~ exp(-0.5 * x)), se=FALSE, color="red") #+
  #geom_smooth(method="lm", formula= (y ~ exp(-2 * x)), se=FALSE, color="blue") #+
  #geom_smooth(method="lm", formula = y ~ x + I(x^-0.5), se=FALSE, color="green") 


```


## Complete Data Set-up

Three different spatial system extents to play with here:

1.  Observed Flows from LSOAs to Schools Only (Croydon LSOA to School Obs)
2.  All LSOAs in Boroughs Surrounding Croydon to Schools in Croydon (assuming that all might realistically be origins for pupils)
3.  All LSOAs in London - just to see what effect is has on model predictions

```{r}
#1. Observed Flows from LSOAs to Schools Only (Croydon LSOA to School Obs)

croydon_lSOA_to_school_obs$dist_straight <- croydon_travel_lines$distances[match(croydon_lSOA_to_school_obs$od_code, croydon_travel_lines$od_code)]

croydon_lSOA_to_school_obs$orig_school_children_total <- LSOA_Atlas$schoolchildren_and_full_time_students_age_18_and_over[match(croydon_lSOA_to_school_obs$orig, LSOA_Atlas$lsoa_code)]


#2. All LSOAs in Boroughs Surrounding Croydon to Schools in Croydon 

lsoa_surround_croydon_to_croydon_school_all$dist_straight <- croydon_travel_lines$distances[match(lsoa_surround_croydon_to_croydon_school_all$od_code, croydon_travel_lines$od_code)]

lsoa_surround_croydon_to_croydon_school_all$orig_school_children_total <- LSOA_Atlas$schoolchildren_and_full_time_students_age_18_and_over[match(lsoa_surround_croydon_to_croydon_school_all$orig, LSOA_Atlas$lsoa_code)]

#3. All LSOAs in London - just to see what effect is has on model predictions

lsoa_london_to_croydon_school_all$dist_straight <- london_travel_lines$distances[match(lsoa_london_to_croydon_school_all$od_code, london_travel_lines$od_code)]

lsoa_london_to_croydon_school_all$orig_school_children_total <- LSOA_Atlas$schoolchildren_and_full_time_students_age_18_and_over[match(lsoa_london_to_croydon_school_all$orig, LSOA_Atlas$lsoa_code)]

#add some geometry

```

## Model Calibration

### Basic Descriptives

```{r}
#check variable distributions
ggplot(lsoa_london_to_croydon_school_all) +
  geom_histogram(aes(x = flow))

ggplot(lsoa_london_to_croydon_school_all) +
  geom_histogram(aes(x = log(flow)))

ggplot(lsoa_london_to_croydon_school_all) +
  geom_histogram(aes(x = log(dist_straight)))

ggplot(lsoa_london_to_croydon_school_all) +
  geom_histogram(aes(x = orig_pop))

ggplot(lsoa_london_to_croydon_school_all) +
  geom_histogram(aes(x = dest_total_pupils))

ggplot(lsoa_london_to_croydon_school_all) +
  geom_point(aes(y = log(flow), x = log(dist_straight)))

```

### Basic Calibrated Gravity

#### 

Create some Goodness-of-fit functions first

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated, use = "pairwise.complete.obs", method = c("pearson"))
  R2 <- r^2
  R2
}

CalcRMSE <- function(observed,estimated){
  res <- (observed - estimated)^2
  RMSE <- round(sqrt(mean(res)),3)
  RMSE
}
```

#### Total Constrained

#BIG QUESTION TO BE ANSWERED - SPARSE MATRICES: DO WE WANT TO FILL NA's with 0.0000001 etc.OR LEAVE AS NA? Few Tests Below - i.e. with a dest constraint, we might not need

```{r}
library(broom)
data=lsoa_london_to_croydon_school_all 

SchoolSIM1 <- glm(flow ~ log(orig_pop) + log(dest_capacity) + log(dist_straight), na.action = na.exclude, family = poisson(link = "log"), data = data)

summary(SchoolSIM1)
tidy(SchoolSIM1)
```

```{r}
## extract the coefficients

k <- SchoolSIM1$coefficients[1]
mu <- SchoolSIM1$coefficients[2]
alpha <- SchoolSIM1$coefficients[3]
beta <- -SchoolSIM1$coefficients[4]

## calculate the some new parameter bits
vi1_mu <- data$orig_pop^mu
wj3_alpha <- data$dest_capacity^alpha
dist_beta <- data$dist_straight^-beta
T1 <- vi1_mu*wj3_alpha*dist_beta
T2 <- sum(data$flow, na.rm = T)
k <- T2/sum(T1, na.rm = T)

```

```{r}
lsoa_london_to_croydon_school_all$fitted <- predict(SchoolSIM1, type = "response")
lsoa_london_to_croydon_school_all$est1 <- k*vi1_mu*wj3_alpha*dist_beta
lsoa_london_to_croydon_school_all$obs <- lsoa_london_to_croydon_school_all$flow

CalcRSquared(lsoa_london_to_croydon_school_all$flow,lsoa_london_to_croydon_school_all$est1)

sum(lsoa_london_to_croydon_school_all$flow, na.rm = T)
sum(lsoa_london_to_croydon_school_all$est1, na.rm = T)
sum(lsoa_london_to_croydon_school_all$fitted, na.rm = T)


```

# Problem we have here is the fitted values won't estimate anything for areas that weren't in the original data - deterministic challenge

The estimates derived from the parameters try to spread the same total number of students across all areas - spreads them too thinly

## make some maps

```{r}
library(tidyr)

flows <- london_travel_lines
flows$observed <- lsoa_london_to_croydon_school_all$flow[match(flows$od_code, lsoa_london_to_croydon_school_all$od_code)]
flows$fitted <- lsoa_london_to_croydon_school_all$fitted[match(flows$od_code, lsoa_london_to_croydon_school_all$od_code)]
flows$est1 <- lsoa_london_to_croydon_school_all$est1[match(flows$od_code, lsoa_london_to_croydon_school_all$od_code)]

flow_clean <- flows %>% drop_na(est1)
flow_clean <- flows %>% drop_na(observed)
flow_clean <- flows %>% drop_na(fitted)

tmap_mode("view")
map <- tm_shape(flow_clean) +
  tm_lines(palette = "plasma", breaks = c(0, 5, 10, 20, 40, 100,200),
           lwd = "est1",
           scale = 9,
           id="",
           popup.vars= c("orig", "dest","flow"),
           title.lwd = "number_of_pupils",
           alpha = 0.6,
           col = "est1",
           title = "Estimated Pupil Count")+
  tm_shape(CroydonSchools_secondary)+
          tm_dots(col="phase_of_education_name", size=0.01,id="establishment_name", title = "Phase of Education") +
  tm_shape(London_Boroughs) +
          tm_polygons(col = NA, alpha = 0)

map
```

```{r}
#create some Oi and Dj columns in the dataframe and store row and column totals in them:
#to create O_i, take mdatasub ...then... group by origcodenew ...then... summarise by calculating the sum of Total
O_i <- lsoa_london_to_croydon_school_all %>% group_by(orig) %>% summarise(O_i = sum(flow, na.rm = T))

lsoa_london_to_croydon_school_all$O_i <- O_i$O_i[match(lsoa_london_to_croydon_school_all$orig,O_i$orig)]

D_j <- lsoa_london_to_croydon_school_all %>% group_by(dest) %>% summarise(D_j = sum(flow, na.rm = T))

lsoa_london_to_croydon_school_all$D_j <- D_j$D_j[match(lsoa_london_to_croydon_school_all$dest,D_j$dest)]
```

```{r}
## Attraction Constrained

SchoolSIM2 <- glm(flow ~ log(orig_pop) + establishment_name + log(dist_straight)-1, na.action = na.exclude, family = poisson(link = "log"), data = data)

summary(SchoolSIM2)
tidy(SchoolSIM2)
```

```{r}
lsoa_london_to_croydon_school_all$attrsimFitted <- round(fitted(SchoolSIM2),0)
CalcRSquared(lsoa_london_to_croydon_school_all$flow,lsoa_london_to_croydon_school_all$attrsimFitted)

```

```{r}
coefs <- as.data.frame(SchoolSIM2$coefficients)
```
